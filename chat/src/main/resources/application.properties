spring.profiles.active=dev
debug=false
trace=false
logging.file=${user.dir}/logging/logs.log
logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type=TRACE
#logging.file.max-history=0
#server.address=api
server.port=8080
spring.jackson.serialization.INDENT_OUTPUT=true
# Maximum number of connections that the server accepts and processes at any given time.
server.tomcat.max-connections=0
#DATA
spring.datasource.continue-on-error=false
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.name=hikariCP
spring.datasource.password=
spring.datasource.url=jdbc:postgresql://localhost:5432/dev
spring.datasource.username=macuser
#Should not be set. Explanation:
#https://vladmihalcea.com/the-open-session-in-view-anti-pattern/ 
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=false
#validate: validate the schema, makes no changes to the database.
#update: update the schema.
#create: creates the schema, destroying previous data.
#create-drop: drop the schema when the SessionFactory is closed 
#explicitly, typically when the application is stopped.
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.use_sql=true
#This property controls the default auto-commit behavior of connections 
#returned from the pool. It is a boolean value. Default: true
spring.datasource.hikari.autoCommit=true
#This property controls the maximum number of milliseconds that a client
#(that's you) will wait for a connection from the pool. If this time is 
#exceeded without a connection becoming available, a SQLException will 
#be thrown. Lowest acceptable connection timeout is 250 ms. 
#Default: 30000 (30 seconds)
spring.datasource.hikari.connectionTimeout=30000
#This property controls the maximum lifetime of a connection in the pool.
#An in-use connection will never be retired, only when it is closed will
#it then be removed. On a connection-by-connection basis, minor
#negative attenuation is applied to avoid mass-extinction in the pool.
#We strongly recommend setting this value, and it should be several
#seconds shorter than any database or infrastructure imposed connection
#time limit. A value of 0 indicates no maximum lifetime
#(infinite lifetime), subject of course to the idleTimeout setting. 
#Default: 1800000 (30 minutes)
spring.datasource.hikari.maxLifetime=1800000
#This property controls the minimum number of idle connections that 
#HikariCP tries to maintain in the pool. If the idle connections dip 
#below this value and total connections in the pool are less than 
#maximumPoolSize, HikariCP will make a best effort to add additional 
#connections quickly and efficiently. However, for maximum performance 
#and responsiveness to spike demands, we recommend not setting this 
#value and instead allowing HikariCP to act as a fixed size connection 
#pool. Default: same as maximumPoolSize
spring.datasource.hikari.minimumIdle=10
#This property controls the maximum size that the pool is allowed to 
#reach, including both idle and in-use connections. Basically this value
#will determine the maximum number of actual connections to the database 
#backend. A reasonable value for this is best determined by your 
#execution environment. When the pool reaches this size, and no idle 
#connections are available, calls to getConnection() will block for up 
#to connectionTimeout milliseconds before timing out. Please read about 
#pool sizing. Default: 10
spring.datasource.hikari.maximumPoolSize=10
#This property represents a user-defined name for the connection pool 
#and appears mainly in logging and JMX management consoles to identify 
#pools and pool configurations. Default: auto-generated
spring.datasource.hikari.poolName=HCPOOL






